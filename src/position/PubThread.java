package position;/* BusSystem.MessagePublisher.java
   A publication of data of type BusSystem.Msg
   This file is derived from code automatically generated by the rtiddsgen
   command:
   rtiddsgen -language java -example <arch> pr1.idl
   Example publication of type BusSystem.Msg automatically generated by
   'rtiddsgen'. To test them follow these steps:
   (1) Compile this file and the example subscription.
   (2) Start the subscription on the same domain used for RTI Connext with the command
       java BusSystem.MsgSubscriber <domain_id> <sample_count>

   (3) Start the publication on the same domain used for RTI Connext with the command
       java BusSystem.MessagePublisher <domain_id> <sample_count>
   (4) [Optional] Specify the list of discovery initial peers and
       multicast receive addresses via an environment variable or a file
       (in the current working directory) called NDDS_DISCOVERY_PEERS.

   You can run any number of publishers and subscribers programs, and can
   add and remove them dynamically from the domain.

   Example:

       To run the example application on domain <domain_id>:

       Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
       Java.

        On Unix:
             add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
             variable

        On Windows:
             add $(NDDSHOME)\lib<arch> to the 'Path' environment variable

       Run the Java applications:

        java -Djava.ext.dirs=$(NDDSHOME)/class BusSystem.MessagePublisher <domain_id>
        java -Djava.ext.dirs=$(NDDSHOME)/class BusSystem.MsgSubscriber <domain_id>


modification history
------------ -------
*/

import com.rti.dds.domain.DomainParticipant;
import com.rti.dds.domain.DomainParticipantFactory;
import com.rti.dds.infrastructure.InstanceHandle_t;
import com.rti.dds.infrastructure.StatusKind;
import com.rti.dds.publication.Publisher;
import com.rti.dds.topic.Topic;
import model.Position;

// ===========================================================================
public class PubThread {


    // -----------------------------------------------------------------------
    // Private Methods
    // -----------------------------------------------------------------------

    private DomainParticipant participant;
    private PositionDataWriter defaultTopicWriter;
    private PositionDataWriter accidentTopicWriter;

    // --- Constructors: -----------------------------------------------------

    public PubThread(int domainId) {
        super();

        //Create participant

        // --- Create participant --- //

            /* To create participant with default QoS,
               use DomainParticipantFactory.DomainParticipantFactory.
                       participant.get_default_publisher_qos() instead */
        participant = DomainParticipantFactory.TheParticipantFactory.
                create_participant(
                        domainId, DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                        null /* listener */, StatusKind.STATUS_MASK_NONE);

        DomainParticipant participant = null;
        Publisher publisher = null;
        Topic defaultTopic = null;
        PositionDataWriter writer = null;

        // --- Create participant --- //

            /* To create participant with default QoS,
               use DomainParticipantFactory.DomainParticipantFactory.
                       participant.get_default_publisher_qos() instead */
        participant = DomainParticipantFactory.TheParticipantFactory.
                create_participant(
                        domainId, DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                        null /* listener */, StatusKind.STATUS_MASK_NONE);


        // --- Create publisher --- //
            /* To customize publisher QoS, use
               participant.get_default_publisher_qos() instead */
        publisher = participant.create_publisher(
                DomainParticipant.PUBLISHER_QOS_DEFAULT, null /* listener */,
                StatusKind.STATUS_MASK_NONE);

        // --- Create topic --- //
        /* Register type before creating topic */
        String typeName = PositionTypeSupport.get_type_name();
        PositionTypeSupport.register_type(participant, typeName);
            /* To customize topic QoS, use
               participant.get_default_topic_qos() instead */
        defaultTopic = participant.create_topic(
                "P3464_hrmcgough: PT/POS",
                typeName, DomainParticipant.TOPIC_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);

        Topic accidentTopic = participant.create_topic(
                "P3464_hmcgough: PT/ALR/ACC", typeName, DomainParticipant.TOPIC_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);

        // --- Create writer --- //
            /* To customize data writer QoS, use
               publisher.get_default_datawriter_qos() instead */
        defaultTopicWriter = (PositionDataWriter)
                publisher.create_datawriter(
                        defaultTopic, Publisher.DATAWRITER_QOS_DEFAULT,
                        null /* listener */, StatusKind.STATUS_MASK_NONE);

        accidentTopicWriter = (PositionDataWriter)
                publisher.create_datawriter(
                        accidentTopic, Publisher.DATAWRITER_QOS_DEFAULT,
                        null /* listener */, StatusKind.STATUS_MASK_NONE);



    }

    public void shutdown(){
        if(participant != null) {
            participant.delete_contained_entities();
            DomainParticipantFactory.TheParticipantFactory.
                    delete_participant(participant);
        }
            /* RTI Connext provides finalize_instance()
               method for people who want to release memory used by the
               participant factory singleton. Uncomment the following block of
               code for clean destruction of the participant factory
               singleton. */
//        DomainParticipantFactory.finalize_instance();
    }

    public void write(Position data){
        if("accident".equalsIgnoreCase(data.trafficConditions)){
            accidentTopicWriter.write(data, InstanceHandle_t.HANDLE_NIL);
        } else{
            defaultTopicWriter.write(data, InstanceHandle_t.HANDLE_NIL);
        }
    }
}
