/*
WARNING: THIS FILE IS AUTO-GENERATED. DO NOT MODIFY.
This file was generated from .idl using "rtiddsgen".
The rtiddsgen tool is part of the RTI Connext distribution.
For more information, type 'rtiddsgen -help' at a command shell
or consult the RTI Connext manual.
*/

import com.rti.dds.cdr.*;
import com.rti.dds.domain.DomainParticipant;
import com.rti.dds.infrastructure.RETCODE_ERROR;
import com.rti.dds.publication.DataWriter;
import com.rti.dds.publication.DataWriterListener;
import com.rti.dds.subscription.DataReader;
import com.rti.dds.subscription.DataReaderListener;
import com.rti.dds.topic.*;
import com.rti.dds.typecode.TypeCode;

public class MessageTypeSupport extends TypeSupportImpl {
    // -----------------------------------------------------------------------
    // Private Fields
    // -----------------------------------------------------------------------
    private static final String TYPE_NAME = "Msg";
    private static final char[] PLUGIN_VERSION = {2, 0, 0, 0};
    private static final MessageTypeSupport _singleton
            = new MessageTypeSupport();
    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------
    // --- External methods: -------------------------------------------------
    /* The methods in this section are for use by users of RTI Connext
     */
    public static String get_type_name() {
        return _singleton.get_type_nameI();
    }
    public static void register_type(DomainParticipant participant,
                                     String type_name) {
        _singleton.register_typeI(participant, type_name);
    }
    public static void unregister_type(DomainParticipant participant,
                                       String type_name) {
        _singleton.unregister_typeI(participant, type_name);
    }
    /* The methods in this section are for use by RTI Connext
     * itself and by the code generated by rtiddsgen for other types.
     * They should be used directly or modified only by advanced users and are
     * subject to change in future versions of RTI Connext.
     */
    public static MessageTypeSupport get_instance() {
        return _singleton;
    }
    public static MessageTypeSupport getInstance() {
        return get_instance();
    }
    public static TypeCode getTypeCode(){
        return MessageTypeCode.VALUE;
    }
    public Object create_data() {
        return Msg.create();
    }
    public void destroy_data(Object data) {
        return;
    }
    public Object create_key() {
        return new Msg();
    }
    public void destroy_key(Object key) {
        return;
    }
    public Class get_type() {
        return Msg.class;
    }
    public Object copy_data(Object destination, Object source) {
        Msg typedDst = (Msg) destination;
        Msg typedSrc = (Msg) source;
        return typedDst.copy_from(typedSrc);
    }
    public long get_serialized_sample_max_size(Object endpoint_data,boolean include_encapsulation,short encapsulation_id,long currentAlignment) {
        long origAlignment = currentAlignment;
        long encapsulation_size = currentAlignment;
        if(include_encapsulation) {
            if (!CdrEncapsulation.isValidEncapsulationKind(encapsulation_id)) {
                throw new RETCODE_ERROR("Unsupported encapsulation");
            }
            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size -= currentAlignment;
            currentAlignment = 0;
            origAlignment = 0;
        }
        currentAlignment +=CdrPrimitiveType.getStringMaxSizeSerialized(currentAlignment, (128)+1);
        if (include_encapsulation) {
            currentAlignment += encapsulation_size;
        }
        return  currentAlignment - origAlignment;
    }
    public long get_serialized_sample_min_size(Object endpoint_data,boolean include_encapsulation,short encapsulation_id,long currentAlignment) {
        long origAlignment = currentAlignment;
        long encapsulation_size = currentAlignment;
        if(include_encapsulation) {
            if (!CdrEncapsulation.isValidEncapsulationKind(encapsulation_id)) {
                throw new RETCODE_ERROR("Unsupported encapsulation");
            }
            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size -= currentAlignment;
            currentAlignment = 0;
            origAlignment = 0;
        }
        currentAlignment += CdrPrimitiveType.getStringMaxSizeSerialized(currentAlignment, 1);
        if (include_encapsulation) {
            currentAlignment += encapsulation_size;
        }
        return  currentAlignment - origAlignment;
    }
    public long get_serialized_sample_size(
            Object endpoint_data, boolean include_encapsulation,
            short encapsulation_id, long currentAlignment,
            Object sample)
    {
        Msg typedSrc = (Msg) sample;
        DefaultEndpointData epd = ((DefaultEndpointData) endpoint_data) ;
        long origAlignment = currentAlignment;
        long encapsulation_size = currentAlignment;
        if(include_encapsulation) {
            if (!CdrEncapsulation.isValidEncapsulationKind(encapsulation_id)) {
                throw new RETCODE_ERROR("Unsupported encapsulation");
            }
            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size -= currentAlignment;
            currentAlignment = 0;
            origAlignment = 0;
            epd.setBaseAlignment(currentAlignment);
        }
        currentAlignment  +=  CdrPrimitiveType.getStringSerializedSize(epd.getAlignment(currentAlignment), typedSrc.msg );
        if (include_encapsulation) {
            currentAlignment += encapsulation_size;
        }
        return currentAlignment - origAlignment;
    }
    public long get_serialized_key_max_size(
            Object endpoint_data,
            boolean include_encapsulation,
            short encapsulation_id,
            long currentAlignment)
    {
        long origAlignment = currentAlignment;
        long encapsulation_size = currentAlignment;
        if(include_encapsulation) {
            if (!CdrEncapsulation.isValidEncapsulationKind(encapsulation_id)) {
                throw new RETCODE_ERROR("Unsupported encapsulation");
            }
            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size += CdrPrimitiveType.SHORT.getMaxSizeSerialized(encapsulation_size);
            encapsulation_size -= currentAlignment;
            currentAlignment = 0;
            origAlignment = 0;
        }
        currentAlignment += get_serialized_sample_max_size(
                endpoint_data,false,encapsulation_id,currentAlignment);
        if (include_encapsulation) {
            currentAlignment += encapsulation_size;
        }
        return currentAlignment - origAlignment;
    }
    public void serialize(Object endpoint_data,Object src, CdrOutputStream dst,boolean serialize_encapsulation,
                          short encapsulation_id, boolean serialize_sample, Object endpoint_plugin_qos) {
        int position = 0;
        if(serialize_encapsulation) {
            dst.serializeAndSetCdrEncapsulation(encapsulation_id);
            position = dst.resetAlignment();
        }
        if(serialize_sample) {
            Msg typedSrc = (Msg) src;
            dst.writeString(typedSrc.msg,256);
            dst.writeString(typedSrc.sender,256);
            dst.writeInt(typedSrc.number);
        }
        if (serialize_encapsulation) {
            dst.restoreAlignment(position);
        }
    }
    public long serialize_to_cdr_buffer(
            byte[] buffer,
            long length,
            Msg src)
    {
        return super.serialize_to_cdr_buffer(buffer,length,src);
    }
    public void serialize_key(
            Object endpoint_data,
            Object src,
            CdrOutputStream dst,
            boolean serialize_encapsulation,
            short encapsulation_id,
            boolean serialize_key,
            Object endpoint_plugin_qos)
    {
        int position = 0;
        if (serialize_encapsulation) {
            dst.serializeAndSetCdrEncapsulation(encapsulation_id);
            position = dst.resetAlignment();
        }
        if (serialize_key) {
            Msg typedSrc = (Msg) src;
            serialize(endpoint_data, src, dst, false, CdrEncapsulation.CDR_ENCAPSULATION_ID_CDR_BE, true, endpoint_plugin_qos);
        }
        if (serialize_encapsulation) {
            dst.restoreAlignment(position);
        }
    }
    public Object deserialize_sample(
            Object endpoint_data,
            Object dst,
            CdrInputStream src, boolean deserialize_encapsulation,
            boolean deserialize_sample,
            Object endpoint_plugin_qos)
    {
        int position = 0;
        if(deserialize_encapsulation) {
            src.deserializeAndSetCdrEncapsulation();
            position = src.resetAlignment();
        }
        if(deserialize_sample) {
            Msg typedDst = (Msg) dst;
            typedDst.clear();
            try{
                typedDst.msg = src.readString(256);
                typedDst.sender = src.readString(256);
                typedDst.number = src.readInt();
            } catch (IllegalCdrStateException stateEx) {
                if (src.available() >= CdrEncapsulation.CDR_ENCAPSULATION_PARAMETER_ID_ALIGNMENT) {
                    throw new RETCODE_ERROR("Error deserializing sample! Remainder: " + src.available() + "\n" +
                            "Exception caused by: " + stateEx.getMessage());
                }
            } catch (Exception ex) {
                throw new RETCODE_ERROR(ex.getMessage());
            }
        }
        if (deserialize_encapsulation) {
            src.restoreAlignment(position);
        }
        return dst;
    }
    public void deserialize_from_cdr_buffer(
            Msg dst,
            byte[] buffer,
            long length)
    {
        super.deserialize_from_cdr_buffer(dst,buffer,length);
    }
    public String data_to_string(
            Msg sample,
            PrintFormatProperty property)
    {
        return super.data_to_string(sample, property);
    }
    public String data_to_string(
            Msg sample)
    {
        return super.data_to_string(sample);
    }
    public Object deserialize_key_sample(
            Object endpoint_data,
            Object dst,
            CdrInputStream src,
            boolean deserialize_encapsulation,
            boolean deserialize_key,
            Object endpoint_plugin_qos)
    {
        int position = 0;
        if(deserialize_encapsulation) {
            src.deserializeAndSetCdrEncapsulation();
            position = src.resetAlignment();
        }
        if(deserialize_key) {
            Msg typedDst = (Msg) dst;
            deserialize_sample(endpoint_data, dst, src, false, true, endpoint_plugin_qos);
        }
        if (deserialize_encapsulation) {
            src.restoreAlignment(position);
        }
        return dst;
    }
    public void skip(Object endpoint_data,
                     CdrInputStream src,
                     boolean skip_encapsulation,
                     boolean skip_sample,
                     Object endpoint_plugin_qos)
    {
        int position = 0;
        if (skip_encapsulation) {
            src.skipEncapsulation();
            position = src.resetAlignment();
        }
        if (skip_sample) {
            src.skipString();
        }
        if (skip_encapsulation) {
            src.restoreAlignment(position);
        }
    }
    public Object serialized_sample_to_key(
            Object endpoint_data,
            Object sample,
            CdrInputStream src,
            boolean deserialize_encapsulation,
            boolean deserialize_key,
            Object endpoint_plugin_qos)
    {
        int position = 0;
        if(deserialize_encapsulation) {
            src.deserializeAndSetCdrEncapsulation();
            position = src.resetAlignment();
        }
        if (deserialize_key) {
            Msg typedDst = (Msg) sample;
            deserialize_sample(
                    endpoint_data, sample, src, false,
                    true, endpoint_plugin_qos);
        }
        if (deserialize_encapsulation) {
            src.restoreAlignment(position);
        }
        return sample;
    }
    // -----------------------------------------------------------------------
    // Callbacks
    // -----------------------------------------------------------------------
    public Object on_participant_attached(Object registration_data,
                                          TypeSupportParticipantInfo participant_info,
                                          boolean top_level_registration,
                                          Object container_plugin_context,
                                          TypeCode type_code) {
        return super.on_participant_attached(
                registration_data, participant_info, top_level_registration,
                container_plugin_context, type_code);
    }
    public void on_participant_detached(Object participant_data) {
        super.on_participant_detached(participant_data);
    }
    public Object on_endpoint_attached(Object participantData,
                                       TypeSupportEndpointInfo endpoint_info,
                                       boolean top_level_registration,
                                       Object container_plugin_context) {
        return super.on_endpoint_attached(
                participantData,  endpoint_info,
                top_level_registration, container_plugin_context);
    }
    public void on_endpoint_detached(Object endpoint_data) {
        super.on_endpoint_detached(endpoint_data);
    }
    // -----------------------------------------------------------------------
    // Protected Methods
    // -----------------------------------------------------------------------
    protected DataWriter create_datawriter(long native_writer,
                                           DataWriterListener listener,
                                           int mask) {
        return new MessageDataWriter(native_writer, listener, mask, this);
    }
    protected DataReader create_datareader(long native_reader,
                                           DataReaderListener listener,
                                           int mask) {
        return new MessageDataReader(native_reader, listener, mask, this);
    }
    // -----------------------------------------------------------------------
    // Constructor
    // -----------------------------------------------------------------------
    protected MessageTypeSupport() {
        /* If the user data type supports keys, then the second argument
        to the constructor below should be true.  Otherwise it should
        be false. */
        super(TYPE_NAME, false, MessageTypeCode.VALUE, Msg.class,TypeSupportType.TST_STRUCT, PLUGIN_VERSION);
    }
    protected MessageTypeSupport(boolean enableKeySupport) {
        super(TYPE_NAME, enableKeySupport, MessageTypeCode.VALUE, Msg.class,TypeSupportType.TST_STRUCT, PLUGIN_VERSION);
    }
}
